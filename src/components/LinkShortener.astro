<form method="POST" class="flex items-center gap-2 mt-4 w-full max-w-[450px]">
    <input
        type="text"
        name="url"
        required
        pattern="http*://.*"
        class="w-full flex-1 p-2 text-sm placeholder-gray-500 border rounded-md focus:outline-none border-gray-600 focus:border-indigo-500 dark:bg-gray-700 dark:text-gray-100"
        placeholder="Enter a link"
    />
    <button class="shrink-0 p-2 text-sm font-medium text-white bg-indigo-500 rounded-md hover:bg-indigo-600 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 dark:bg-indigo-400 dark:hover:bg-indigo-500">
     Generate
    </button>   
</form>
<div id="linksContainer" class="mt-4 space-y-2">
    <!-- Los enlaces generados se añadirán aquí -->
</div>

<script>
    const form = document.querySelector('form') as HTMLFormElement;
    const linksContainer = document.getElementById('linksContainer') as HTMLDivElement;

    // Función para añadir enlace al contenedor y al localStorage
    function addLinkToContainer(shortUrl: string) {
        const fullUrl = `http://localhost:3000/${shortUrl}`;
        
        const linkElement = document.createElement('div');
        linkElement.className = "flex justify-between items-center bg-gray-800 p-2 rounded-lg";

        const linkText = document.createElement('p');
        linkText.className = "link text-gray-100 flex-1";
        linkText.textContent = fullUrl;

        const copyBtn = document.createElement('button');
        copyBtn.className = "copyBtn px-2 py-1 bg-indigo-500 hover:bg-indigo-600 text-white font-bold rounded-md";
        copyBtn.innerHTML = `<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-copy"><rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path></svg>`;

        linkElement.appendChild(linkText);
        linkElement.appendChild(copyBtn);
        linksContainer.appendChild(linkElement);

        copyBtn.addEventListener('click', () => {
            navigator.clipboard.writeText(fullUrl);
            alert('Link copied to clipboard');
        });

        const savedLinks = JSON.parse(localStorage.getItem('savedLinks') || '[]');
        if (!savedLinks.includes(shortUrl)) {
            savedLinks.push(shortUrl);
            localStorage.setItem('savedLinks', JSON.stringify(savedLinks));
        }
    }


    window.onload = () => {
        const inputElement = document.querySelector('input[name="url"]') as HTMLInputElement;
        inputElement.focus();

        linksContainer.innerHTML = '';
        const savedLinks = JSON.parse(localStorage.getItem('savedLinks') || '[]');
        savedLinks.forEach((link: string) => {
            addLinkToContainer(link);
        });
    };


    form.addEventListener('submit', (event) => {
        event.preventDefault();
        const formData = new FormData(form);
        const url = formData.get('url');

        fetch('http://localhost:3000/short', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                url: url,
                shortUrl: Math.random().toString(36).substring(2, 10)
            })
        }).then(res => res.json()).then(data => {
            console.log(data.data.short_url)
            addLinkToContainer(data.data.short_url);
        }).catch((error) => {
            console.error('Error:', error);
        });

        form.reset();
    });
</script>

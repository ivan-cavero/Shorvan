---
import ShortLinkContainer from "./ShortLinkDisplay.astro";
---

<form method="POST" class="flex items-center gap-2 mt-4 w-full max-w-[450px]">
    <div class="flex items-center bg-white/15 rounded-lg backdrop-blur-sm shadow-lg w-full h-10">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mx-3 text-white">
            <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"/>
            <path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"/>
        </svg>
        <input
            type="text"
            name="url"
            required
            style="outline: none; box-shadow: none; border: none;"
            class="bg-transparent w-full text-white placeholder-gray-300 pr-3"
            placeholder="Enter a URL"
        />    
    </div>
    <button
        id="generateButton"
        class="flex items-center justify-center h-10 p-2 text-sm font-medium text-white bg-indigo-500 rounded-md hover:bg-indigo-600 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
    >
        <svg width="20" height="20" fill="currentColor" class="hidden mr-2 animate-spin-clockwise" style="animation-iteration-count: infinite;" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg">
            <path d="M526 1394q0 53-37.5 90.5t-90.5 37.5q-52 0-90-38t-38-90q0-53 37.5-90.5t90.5-37.5 90.5 37.5 37.5 90.5zm498 206q0 53-37.5 90.5t-90.5 37.5-90.5-37.5-37.5-90.5 37.5-90.5 90.5-37.5 90.5 37.5 37.5 90.5zm-704-704q0 53-37.5 90.5t-90.5 37.5-90.5-37.5-37.5-90.5 37.5-90.5 90.5-37.5 90.5 37.5 37.5 90.5zm1202 498q0 52-38 90t-90 38q-53 0-90.5-37.5t-37.5-90.5 37.5-90.5 90.5-37.5 90.5 37.5 37.5 90.5zm-964-996q0 66-47 113t-113 47-113-47-47-113 47-113 113-47 113 47 47 113zm1170 498q0 53-37.5 90.5t-90.5 37.5-90.5-37.5-37.5-90.5 37.5-90.5 90.5-37.5 90.5 37.5 37.5 90.5zm-640-704q0 80-56 136t-136 56-136-56-56-136 56-136 136-56 136 56 56 136zm530 206q0 93-66 158.5t-158 65.5q-93 0-158.5-65.5t-65.5-158.5q0-92 65.5-158t158.5-66q92 0 158 66t66 158z">
            </path>
        </svg>
        <span>Generate</span>
    </button>
</form>
<ShortLinkContainer />

<script>
    const saveOrUpdateLink = (newLink) => {
        let links = JSON.parse(localStorage.getItem('links') || '[]');
        const index = links.findIndex(link => link.shortCode === newLink.shortCode);

        if (index !== -1) {
            links[index] = newLink; // Update the existing link
        } else {
            links.push(newLink); // Add the new link
        }

        localStorage.setItem('links', JSON.stringify(links));
        window.dispatchEvent(new Event("NewDataEvent"));
    };


    const form = document.querySelector('form') as HTMLFormElement

    window.onload = () => {
        const inputElement = document.querySelector('input[name="url"]') as HTMLInputElement
        inputElement.focus()
    }

    form.addEventListener('submit', async (event) => {
        event.preventDefault()
        const formData = new FormData(form)
        const url = formData.get('url')
        const button = form.querySelector('button') as HTMLButtonElement
        button.disabled = true
        button.querySelector('span').textContent = 'Loading...'
        button.querySelector('svg').classList.remove('hidden')

        try {
            fetch(`${import.meta.env.PUBLIC_BASE_URL}/short-links`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    url: url,
                    shortCode: Math.random().toString(36).substring(2, 8), // Generate a random short code
                    expirationDate: new Date(Date.now() + 1000 * 60 * 60 * 24 * 1) // 1 days
                })
            })
            .then(async res => {
                const data = await res.json();
                saveOrUpdateLink({ url: data.original_url, shortCode: data.short_code, expirationDate: data?.expirationDate, bubbles: [] ,addedAt: new Date()});
            })
            .catch(error => {
                console.error('Error:', error);
            })
            .finally(() => {
                button.disabled = false
                button.querySelector('span').textContent = 'Generate'
                button.querySelector('svg').classList.add('hidden')
            });
        } catch (error) {
            console.error('Error:', error);
        }

        form.reset();
    });
</script>

<style is:global>
input:-webkit-autofill,
input:-webkit-autofill:hover,
input:-webkit-autofill:focus {
    border: 0;
    -webkit-text-fill-color: white;
    -webkit-box-shadow: 0 0 0px 1000px #00000000 inset;
    transition: background-color 5000s ease-in-out 0s;
}
</style>